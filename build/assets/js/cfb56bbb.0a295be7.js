"use strict";(self.webpackChunkblockrial=self.webpackChunkblockrial||[]).push([[850],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),h=a,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1180:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={sidebar_position:4,title:"\u521b\u5efa\u533a\u5757\u94fe"},l=void 0,s={unversionedId:"ETD/blockchain",id:"ETD/blockchain",title:"\u521b\u5efa\u533a\u5757\u94fe",description:"",source:"@site/docs/ETD/blockchain.mdx",sourceDirName:"ETD",slug:"/ETD/blockchain",permalink:"/docs/ETD/blockchain",editUrl:"https://github.com/etherdata-blockchain/blockrial/docs/ETD/blockchain.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"\u521b\u5efa\u533a\u5757\u94fe"},sidebar:"tutorialSidebar",previous:{title:"ETD",permalink:"/docs/ETD/"},next:{title:"\u516c\u94a5\u4e0e\u79c1\u94a5",permalink:"/docs/ETD/pk"}},p=[],u={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Python \u63d0\u4f9b\u7684module\uff08\u6a21\u7d44\uff09\u8207package\uff08\u5957\u4ef6\uff09\u662f\u5efa\u7acb\u67b6\u69cb\u7684\u57fa\u672c\u5143\u4ef6\n# Python\u7684hashlib\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u6458\u8981\u7b97\u6cd5\uff0c\u5982MD5\uff0cSHA1\u7b49\u7b49\u3002 \u6458\u8981\u7b97\u6cd5\u53c8\u79f0\u54c8\u5e0c\u7b97\u6cd5\u3001\u6563\u5217\u7b97\u6cd5\nimport hashlib as hasher\n# \u8a72\u65e5\u671f\u6642\u9593\u6a21\u584a\u985e\u7528\u4f86\u8655\u7406\u65e5\u671f\u548c\u6642\u9593\nimport datetime as date\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# \u5b9a\u7fa9\u4e00\u500b\u985e\u540d\u70baBlock\nclass Block:\n    # \u521d\u59cb\u5316\uff1a\u7528def\u547d\u4ee4\u5b9a\u7fa9\u521d\u59cb\u5316\u51fd\u6578init\uff0c\u69cb\u9020\u81ea\u8eab\u8eab\u4efd\uff0c\u7d22\u5f15\uff0c\u6642\u9593\u6233\uff0c\u6578\u64da\uff0c\u524d\u54c8\u5e0c\u503c\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = self.hash_block()\n    # \u88fd\u9020\u54c8\u5e0c\u503c\uff1a\u7528def\u547d\u4ee4\u5b9a\u7fa9\n    def hash_block(self):\n        # \u6b64\u8655\u7528SHA256\u52a0\u5bc6\u65b9\u6cd5\n        sha = hasher.sha256()\n        sha.update(\n            bytes(\n                str(self.index) + str(self.timestamp) + str(self.data) + str(\n                    self.previous_hash), 'utf-8'))\n        return sha.hexdigest()\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# \u5275\u9020\u5275\u4e16\u5340\u584a\ndef create_genesis_block():\n    # \u624b\u52d5\u69cb\u9020\u4e00\u500b\u7d22\u5f15\u70ba0\u548c\u4efb\u610f\u5148\u524d\u54c8\u5e0c\u7684\u584a\n    return Block(0, date.datetime.now(), "Genesis Block", "0")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# \u69cb\u9020\u5340\u584a\u76f4\u63a5\u7684\u9023\u5f0f\u7d50\u69cb\uff0c\u69cb\u9020\u201c\u5340\u584a\u93c8\u201d\ndef next_block(last_block):\n    # \u7d22\u5f15\u52a0\u4e00\n    this_index = last_block.index + 1\n    # \u589e\u52a0\u6642\u9593\u6233\n    this_timestamp = date.datetime.now()\n    # \u589e\u52a0\u5340\u584a\u88e1\u9762\u7684\u5167\u5bb9\n    this_data = "Hey! I\'m block " + str(this_index)\n    # \u54c8\u5e0c\u503c\u6307\u5411\u524d\u4e00\u500b\u5340\u584a\u7684\u54c8\u5e0c\u503c\n    this_hash = last_block.hash\n    # \u8fd4\u56de\u5340\u584a\n    return Block(this_index, this_timestamp, this_data, this_hash)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# \u5275\u5efa\u5340\u584a\u93c8\u4e26\u6dfb\u52a0genesis\u584a\nblockchain = [create_genesis_block()]\nprevious_block = blockchain[0]\n\n# \u5728\u751f\u6210\u5340\u584a\u4e4b\u5f8c\uff0c\u6211\u5011\u61c9\u8a72\u5728\u93c8\u4e2d\u589e\u52a0\u7684\u5340\u584a\u6578\nnum_of_blocks_to_add = 20\n\n#\u901a\u904e\u5faa\u74b0\u93c8\u5f0f\u6dfb\u52a0\u5340\u584a\uff0c\u4f7f\u5176\u6210\u70ba\u670920\u500b\u5340\u584a\u7684\u5340\u584a\u93c8\nfor i in range(0, num_of_blocks_to_add):\n    #\u5c07\u524d\u5f8c\u5340\u584a\u93c8\u93c8\u63a5\u5230\u4e00\u8d77\n    block_to_add = next_block(previous_block)\n    #\u7528append\u65b9\u6cd5\u589e\u52a0\u5340\u584a\n    blockchain.append(block_to_add)\n    #\u69cb\u9020\u9023\u5f0f\u7d50\u69cb\n    previous_block = block_to_add\n    #  \u6253\u5370\u5df2\u7d93\u69cb\u9020\u597d\u7684\u93c8\n    print("Block #{} has been added to the "\n            "blockchain!".format(block_to_add.index))\n    print("Hash: {}\\n".format(block_to_add.hash))\n')))}d.isMDXComponent=!0}}]);