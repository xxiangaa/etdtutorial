import React, { memo, useCallback, useEffect, useState } from 'react';
import cc from 'classcat';
import { useStore, useStoreApi } from '../../store';
import useReactFlow from '../../hooks/useReactFlow';
import PlusIcon from '../../../assets/icons/plus.svg';
import MinusIcon from '../../../assets/icons/minus.svg';
import FitviewIcon from '../../../assets/icons/fitview.svg';
import LockIcon from '../../../assets/icons/lock.svg';
import UnlockIcon from '../../../assets/icons/unlock.svg';
export const ControlButton = ({ children, className, ...rest }) => (React.createElement("button", { type: "button", className: cc(['react-flow__controls-button', className]), ...rest }, children));
const isInteractiveSelector = (s) => s.nodesDraggable && s.nodesConnectable && s.elementsSelectable;
const Controls = ({ style, showZoom = true, showFitView = true, showInteractive = true, fitViewOptions, onZoomIn, onZoomOut, onFitView, onInteractiveChange, className, children, }) => {
    const store = useStoreApi();
    const [isVisible, setIsVisible] = useState(false);
    const isInteractive = useStore(isInteractiveSelector);
    const { zoomIn, zoomOut, fitView } = useReactFlow();
    const mapClasses = cc(['react-flow__controls', className]);
    const onZoomInHandler = useCallback(() => {
        zoomIn?.();
        onZoomIn?.();
    }, [zoomIn, onZoomIn]);
    const onZoomOutHandler = useCallback(() => {
        zoomOut?.();
        onZoomOut?.();
    }, [zoomOut, onZoomOut]);
    const onFitViewHandler = useCallback(() => {
        fitView?.(fitViewOptions);
        onFitView?.();
    }, [fitView, fitViewOptions, onFitView]);
    const onInteractiveChangeHandler = useCallback(() => {
        store.setState({
            nodesDraggable: !isInteractive,
            nodesConnectable: !isInteractive,
            elementsSelectable: !isInteractive,
        });
        onInteractiveChange?.(!isInteractive);
    }, [isInteractive, onInteractiveChange]);
    useEffect(() => {
        setIsVisible(true);
    }, []);
    if (!isVisible) {
        return null;
    }
    return (React.createElement("div", { className: mapClasses, style: style },
        showZoom && (React.createElement(React.Fragment, null,
            React.createElement(ControlButton, { onClick: onZoomInHandler, className: "react-flow__controls-zoomin", title: "zoom in", "aria-label": "zoom in" },
                React.createElement(PlusIcon, null)),
            React.createElement(ControlButton, { onClick: onZoomOutHandler, className: "react-flow__controls-zoomout", title: "zoom out", "aria-label": "zoom out" },
                React.createElement(MinusIcon, null)))),
        showFitView && (React.createElement(ControlButton, { className: "react-flow__controls-fitview", onClick: onFitViewHandler, title: "fit view", "aria-label": "fit view" },
            React.createElement(FitviewIcon, null))),
        showInteractive && (React.createElement(ControlButton, { className: "react-flow__controls-interactive", onClick: onInteractiveChangeHandler, title: "toggle interactivity", "aria-label": "toggle interactivity" }, isInteractive ? React.createElement(UnlockIcon, null) : React.createElement(LockIcon, null))),
        children));
};
Controls.displayName = 'Controls';
export default memo(Controls);
