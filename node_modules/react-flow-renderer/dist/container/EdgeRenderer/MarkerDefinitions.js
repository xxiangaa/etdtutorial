import React, { useMemo } from 'react';
import { useStore } from '../../store';
import { getMarkerId } from '../../utils/graph';
import { useMarkerSymbol } from './MarkerSymbols';
const Marker = ({ id, type, color, width = 12.5, height = 12.5, markerUnits = 'strokeWidth', strokeWidth, orient = 'auto', }) => {
    const Symbol = useMarkerSymbol(type);
    return (React.createElement("marker", { className: "react-flow__arrowhead", id: id, markerWidth: `${width}`, markerHeight: `${height}`, viewBox: "-10 -10 20 20", markerUnits: markerUnits, orient: orient, refX: "0", refY: "0" },
        React.createElement(Symbol, { color: color, strokeWidth: strokeWidth })));
};
const edgesSelector = (s) => s.edges;
const MarkerDefinitions = ({ defaultColor }) => {
    const edges = useStore(edgesSelector);
    const markers = useMemo(() => {
        const ids = [];
        return edges.reduce((markers, edge) => {
            [edge.markerStart, edge.markerEnd].forEach((marker) => {
                if (marker && typeof marker === 'object') {
                    const markerId = getMarkerId(marker);
                    if (!ids.includes(markerId)) {
                        markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });
                        ids.push(markerId);
                    }
                }
            });
            return markers.sort((a, b) => a.id.localeCompare(b.id));
        }, []);
    }, [edges, defaultColor]);
    return (React.createElement("defs", null, markers.map((marker) => (React.createElement(Marker, { id: marker.id, key: marker.id, type: marker.type, color: marker.color, width: marker.width, height: marker.height, markerUnits: marker.markerUnits, strokeWidth: marker.strokeWidth, orient: marker.orient })))));
};
MarkerDefinitions.displayName = 'MarkerDefinitions';
export default MarkerDefinitions;
