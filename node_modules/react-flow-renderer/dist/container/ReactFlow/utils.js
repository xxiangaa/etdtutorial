import { useMemo, useRef } from 'react';
import shallow from 'zustand/shallow';
export function useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {
    const typesKeysRef = useRef(null);
    const typesParsed = useMemo(() => {
        if (process.env.NODE_ENV === 'development') {
            const typeKeys = Object.keys(nodeOrEdgeTypes);
            if (shallow(typesKeysRef.current, typeKeys)) {
                console.warn("React Flow: It looks like that you created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.");
            }
            typesKeysRef.current = typeKeys;
        }
        return createTypes(nodeOrEdgeTypes);
    }, [nodeOrEdgeTypes]);
    return typesParsed;
}
export default function injectStyle(css) {
    if (!css || typeof document === 'undefined')
        return;
    const head = document.head || document.getElementsByTagName('head')[0];
    const style = document.createElement('style');
    head.appendChild(style);
    style.appendChild(document.createTextNode(css));
}
