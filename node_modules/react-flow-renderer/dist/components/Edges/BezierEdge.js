import React, { memo } from 'react';
import BaseEdge from './BaseEdge';
import { getCenter } from './utils';
import { Position } from '../../types';
export function getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.5, centerX, centerY, }) {
    const leftAndRight = [Position.Left, Position.Right];
    const hasCurvature = curvature > 0;
    let cX, cY = 0;
    if (!hasCurvature) {
        const [_centerX, _centerY] = getCenter({ sourceX, sourceY, targetX, targetY });
        cX = typeof centerX !== 'undefined' ? centerX : _centerX;
        cY = typeof centerY !== 'undefined' ? centerY : _centerY;
    }
    let path = '';
    if (leftAndRight.includes(sourcePosition) && leftAndRight.includes(targetPosition)) {
        const distanceX = sourceX - targetX;
        const scalarX = Math.min(curvature, Math.max(0, distanceX / 10000));
        const hx1 = sourceX + Math.abs(targetX - sourceX) * (curvature - scalarX);
        const hx2 = targetX - Math.abs(targetX - sourceX) * (curvature - scalarX);
        path = hasCurvature
            ? `M${sourceX},${sourceY} C${hx1},${sourceY} ${hx2},${targetY}, ${targetX},${targetY}`
            : `M${sourceX},${sourceY} C${cX},${sourceY} ${cX},${targetY} ${targetX},${targetY}`;
    }
    else if (leftAndRight.includes(targetPosition)) {
        path = `M${sourceX},${sourceY} Q${sourceX},${targetY} ${targetX},${targetY}`;
    }
    else if (leftAndRight.includes(sourcePosition)) {
        path = `M${sourceX},${sourceY} Q${targetX},${sourceY} ${targetX},${targetY}`;
    }
    else {
        const distanceY = sourceY - targetY;
        const scalarY = Math.min(curvature, Math.max(0, distanceY / 10000));
        const hy1 = sourceY + Math.abs(targetY - sourceY) * (curvature - scalarY);
        const hy2 = targetY - Math.abs(targetY - sourceY) * (curvature - scalarY);
        path = hasCurvature
            ? `M${sourceX},${sourceY} C${sourceX},${hy1} ${targetX},${hy2} ${targetX},${targetY}`
            : `M${sourceX},${sourceY} C${sourceX},${cY} ${targetX},${cY} ${targetX},${targetY}`;
    }
    return path;
}
export default memo(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, curvature, }) => {
    const [centerX, centerY] = getCenter({ sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition });
    const path = getBezierPath({
        sourceX,
        sourceY,
        sourcePosition,
        targetX,
        targetY,
        targetPosition,
        curvature,
    });
    return (React.createElement(BaseEdge, { path: path, centerX: centerX, centerY: centerY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart }));
});
